{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Columbo - 0.14.0","text":"<p><code>columbo</code> provides a way to specify a dynamic set of questions to ask a user and get their answers.</p> <p><code>columbo</code>'s feature set allows a program to:</p> <ul> <li>Ask multiple types of questions:<ul> <li>Yes or No</li> <li>Multiple choice</li> <li>Open-ended</li> </ul> </li> <li>Validate the response provided by the user</li> <li>Use answers from earlier questions:<ul> <li>As part of the text of a question</li> <li>As part of the text of a default value</li> <li>To decide if a question should be skipped or a message should be displayed</li> </ul> </li> <li>Accept answers from the command line in addition to prompting the user</li> </ul>"},{"location":"#example","title":"Example","text":""},{"location":"#user-prompts","title":"User Prompts","text":"<p>The primary use of <code>columbo</code> is to define a sequence of interactions that are used to prompt a user to provide answers using a terminal. Below is a sample which shows some ways this can be used.</p> <pre><code>import columbo\n\ninteractions = [\n    columbo.Echo(\"Welcome to the Columbo example\"),\n    columbo.Acknowledge(\"Press enter to start\"),\n    columbo.BasicQuestion(\n        \"user\",\n        \"What is your name?\",\n        default=\"Patrick\",\n    ),\n    columbo.BasicQuestion(\n        \"user_email\",\n        lambda answers: f\"\"\"What email address should be used to contact {answers[\"user\"]}?\"\"\",\n        default=\"me@example.com\",\n    ),\n    columbo.Choice(\n        \"mood\",\n        \"How are you feeling today?\",\n        options={\n            \"happy\": \"\ud83d\ude00\",\n            \"sad\": \"\ud83d\ude22\",\n            \"sleepy\": \"\ud83e\udd71\",\n            \"confused\": \"\ud83e\udd14\",\n        },\n        default=\"happy\",\n    ),\n    columbo.Confirm(\"likes_dogs\", \"Do you like dogs?\", default=True),\n]\n\nanswers = columbo.get_answers(interactions)\nprint(answers)\n</code></pre> <p>Below shows the output when the user accepts the default values for most of the questions. The user provides a different value for the email and explicitly confirms that they like dogs.</p> <pre><code>Welcome to the Columbo example\nPress enter to start\n\nWhat is your name? [Patrick]:\n\nWhat email address should be used to contact Patrick? [me@example.com]: patrick@example.com\n\nHow are you feeling today?\n1 - \ud83d\ude00\n2 - \ud83d\ude22\n3 - \ud83e\udd71\n4 - \ud83e\udd14\nEnter the number of your choice [1]:\n\nDo you like dogs? (Y/n): y\n\n{'user': 'Patrick', 'user_email': 'patrick@example.com', 'mood': 'happy', 'likes_dogs': True}\n</code></pre>"},{"location":"#command-line-answers","title":"Command Line Answers","text":"<p>In addition to the interactive prompts, <code>columbo</code> can also parse command line arguments for interactions. This is done by changing <code>columbo.get_answers()</code> to <code>columbo.parse_args()</code>. Below shows the output when using the same interactions from above.</p> <pre><code>$ python columbo_example.py --user-email patrick@example.com --likes-dogs\n{'user': 'Patrick', 'user_email': 'patrick@example.com', 'mood': 'happy', 'likes_dogs': True}\n</code></pre> The full example <pre><code>import columbo\n\ninteractions = [\n    columbo.Echo(\"Welcome to the Columbo example\"),\n    columbo.Acknowledge(\"Press enter to start\"),\n    columbo.BasicQuestion(\n        \"user\",\n        \"What is your name?\",\n        default=\"Patrick\",\n    ),\n    columbo.BasicQuestion(\n        \"user_email\",\n        lambda answers: f\"\"\"What email address should be used to contact {answers[\"user\"]}?\"\"\",\n        default=\"me@example.com\",\n    ),\n    columbo.Choice(\n        \"mood\",\n        \"How are you feeling today?\",\n        options=[\"happy\", \"sad\", \"sleepy\", \"confused\"],\n        default=\"happy\",\n    ),\n    columbo.Confirm(\"likes_dogs\", \"Do you like dogs?\", default=True),\n]\n\nanswers = columbo.parse_args(\n    interactions,\n    args=[\n        \"--user-email\",\n        \"patrick@example.com\",\n        \"--likes-dogs\",\n    ],\n)\nprint(answers)\n</code></pre>"},{"location":"#where-to-start","title":"Where to Start?","text":"<p>To learn the basics of how to start using <code>columbo</code>, read the Getting Started page.</p>"},{"location":"#detailed-documentation","title":"Detailed Documentation","text":"<p>To learn more about the various ways <code>columbo</code> can be used, read the Usage Guide page.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>To find detailed information about a specific function or class, read the API Reference.</p>"},{"location":"api/","title":"Reference","text":""},{"location":"api/#type-aliases","title":"Type Aliases","text":"<p><code>columbo</code> uses type aliases heavily to simplify the annotations for the functions provided by the library. The following table defines the aliases that are used.</p> Alias Value <code>Answer</code> <code>Union[bool, str]</code> <code>Answers</code> <code>Mapping[str, Answer]</code> <code>Interaction</code> <code>Union[Echo, Acknowledge, Question]</code> <code>MutableAnswers</code> <code>MutableMapping[str, Answer]</code> <code>OptionList</code>\u2020 <code>List[str]</code> <code>Options</code> <code>Union[List[str], Mapping[str, str]]</code> <code>Possible</code>* <code>Union[T, Literal[_Sentinel]]</code> <code>ShouldAsk</code> <code>Callable[[Answers], bool]</code> <code>StaticOrDynamicValue</code> <code>Union[V, Callable[[Answers], V]]</code> <code>ValidationResponse</code> <code>Union[ValidationSuccess, ValidationFailure]</code> <code>Validator</code> <code>Callable[[str, Answers], ValidationResponse]</code> <p>Note</p> <p>* <code>Possible</code> is a special construct used in <code>copy()</code> methods to indicate that a value was not provided. <code>Possible</code>, <code>_Sentinel</code>, &amp; <code>_NOT_GIVEN</code> are not exposed by <code>columbo</code>, but are documented here for completeness.</p> <p>\u2020 <code>OptionList</code> is deprecated in favor of <code>Options</code>. It will be removed in a future release.</p>"},{"location":"api/#interactions","title":"Interactions","text":""},{"location":"api/#columbo.Acknowledge","title":"<code>Acknowledge</code>","text":"<p>               Bases: <code>Displayable</code></p> <p>Display a message to the user and require the user to press ENTER to continue.</p>"},{"location":"api/#columbo.Acknowledge.__init__","title":"<code>__init__(message, should_ask=None)</code>","text":"<p>Initialize an instance.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>StaticOrDynamicValue[str]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>should_ask</code> <code>Optional[ShouldAsk]</code> <p>If <code>None</code>, the message is displayed to the user. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the message should be displayed.</p> <code>None</code>"},{"location":"api/#columbo.Acknowledge.copy","title":"<code>copy(*, message=_NOT_GIVEN, should_ask=_NOT_GIVEN)</code>","text":"<p>Create a new instance like this one, potentially with different values.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Possible[StaticOrDynamicValue[str]]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>should_ask</code> <code>Possible[Optional[ShouldAsk]]</code> <p>If <code>None</code>, the message is displayed. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the message should be displayed.</p> <code>_NOT_GIVEN</code> <p>Returns:</p> Type Description <code>Acknowledge</code> <p>A newly constructed instance with the given values in place of the values of this instance.</p>"},{"location":"api/#columbo.Acknowledge.display","title":"<code>display(answers, no_user_input=False)</code>","text":"<p>Display a message to the user and require the user to press ENTER to continue</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <code>no_user_input</code> <code>bool</code> <p>If <code>True</code> the message will be displayed without waiting for the user to interact. Default: <code>False</code></p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>The value for <code>message</code> did not have the correct type.</p>"},{"location":"api/#columbo.BasicQuestion","title":"<code>BasicQuestion</code>","text":"<p>               Bases: <code>Question[str]</code></p> <p>A question with an arbitrary text answer.</p>"},{"location":"api/#columbo.BasicQuestion.__init__","title":"<code>__init__(name, message, default, cli_help=None, should_ask=None, validator=None, value_if_not_asked=None)</code>","text":"<p>Initialize an instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The identifier that will be used as the key to access this question's answer.</p> required <code>message</code> <code>StaticOrDynamicValue[str]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>default</code> <code>StaticOrDynamicValue[str]</code> <p>The default answer to the question. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>cli_help</code> <code>Optional[str]</code> <p>Optional help message to be displayed for command line interface.</p> <code>None</code> <code>should_ask</code> <code>Optional[ShouldAsk]</code> <p>If <code>None</code>, the question is asked. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the question should be asked.</p> <code>None</code> <code>validator</code> <code>Optional[Validator]</code> <p>Callable that will validate the response given by the user. A ValidationSuccess object indicates success and a ValidationFailure object indicates failure.</p> <code>None</code> <code>value_if_not_asked</code> <code>Optional[str]</code> <p>If provided and if should_ask is being used, this value will be recorded as an answer if should_ask evaluates to False.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>A value for <code>value_if_not_asked</code> was given without giving a value for <code>should_ask</code>.</p>"},{"location":"api/#columbo.BasicQuestion.ask","title":"<code>ask(answers, no_user_input=False)</code>","text":"<p>Prompt the user with this question.</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <code>no_user_input</code> <code>bool</code> <p>If <code>True</code> the default value for the question will be used without waiting for the user to provide an answer. Default: <code>False</code></p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The answer to the question.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Default value did not satisfy the validator. Or the instance was misconfigured in some way.</p>"},{"location":"api/#columbo.BasicQuestion.copy","title":"<code>copy(*, name=_NOT_GIVEN, message=_NOT_GIVEN, default=_NOT_GIVEN, cli_help=_NOT_GIVEN, should_ask=_NOT_GIVEN, validator=_NOT_GIVEN, value_if_not_asked=_NOT_GIVEN)</code>","text":"<p>Create a new instance like this one, potentially with different values.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Possible[str]</code> <p>The identifier that will be used as the key to access this question's answer.</p> <code>_NOT_GIVEN</code> <code>message</code> <code>Possible[StaticOrDynamicValue[str]]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>default</code> <code>Possible[StaticOrDynamicValue[str]]</code> <p>The default answer to the question. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>cli_help</code> <code>Possible[Optional[str]]</code> <p>Optional help message to be displayed for command line interface.</p> <code>_NOT_GIVEN</code> <code>should_ask</code> <code>Possible[Optional[ShouldAsk]]</code> <p>If <code>None</code>, the question is asked. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the question should be asked.</p> <code>_NOT_GIVEN</code> <code>validator</code> <code>Possible[Optional[Validator]]</code> <p>Callable that will validate the response given by the user. None indicates that validation was successful. Otherwise, a string containing details of the error that caused the validation failure.</p> <code>_NOT_GIVEN</code> <code>value_if_not_asked</code> <code>Possible[Optional[str]]</code> <p>If provided and if should_ask is being used, this value will be recorded as an answer if should_ask evaluates to False.</p> <code>_NOT_GIVEN</code> <p>Returns:</p> Type Description <code>BasicQuestion</code> <p>A newly constructed instance with the given values in place of the values of this instance.</p>"},{"location":"api/#columbo.BasicQuestion.validate","title":"<code>validate(value, answers)</code>","text":"<p>Validate the value (a new answer).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The identifier that will be used as the key to access this question's answer.</p> required <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <p>Returns:</p> Type Description <code>ValidationResponse</code> <p>A ValidationFailure or ValidationSuccess object.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>The value for <code>validator</code> was not a callable.</p>"},{"location":"api/#columbo.Choice","title":"<code>Choice</code>","text":"<p>               Bases: <code>Question[str]</code></p> <p>A question with a set of possible answers.</p>"},{"location":"api/#columbo.Choice.__init__","title":"<code>__init__(name, message, options, default, cli_help=None, should_ask=None, value_if_not_asked=None)</code>","text":"<p>Initialize an instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The identifier that will be used as the key to access this question's answer.</p> required <code>message</code> <code>StaticOrDynamicValue[str]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>options</code> <code>StaticOrDynamicValue[Options]</code> <p>The set of possible answers to the question. If the value is callable, the argument passed in will be the answers that have been provided this far. If the value is a <code>Mapping</code>, the values of the mapping will be displayed to the user &amp; the respective key will be the returned value.</p> required <code>default</code> <code>StaticOrDynamicValue[str]</code> <p>The default answer to the question. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>cli_help</code> <code>Optional[str]</code> <p>Optional help message to be displayed for command line interface.</p> <code>None</code> <code>should_ask</code> <code>Optional[ShouldAsk]</code> <p>If <code>None</code>, the question is asked. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the question should be asked.</p> <code>None</code> <code>value_if_not_asked</code> <code>Optional[str]</code> <p>If provided and if should_ask is being used, this value will be recorded as an answer if should_ask evaluates to False.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>A value for <code>value_if_not_asked</code> was given without giving a value for <code>should_ask</code>. Or the given value for <code>value_if_not_asked</code> was not one of the options.</p>"},{"location":"api/#columbo.Choice.ask","title":"<code>ask(answers, no_user_input=False)</code>","text":"<p>Prompt the user with this question.</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <code>no_user_input</code> <code>bool</code> <p>If <code>True</code> the default value for the question will be used without waiting for the user to provide an answer. Default: <code>False</code></p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The answer to the question.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>The instance was misconfigured in some way.</p>"},{"location":"api/#columbo.Choice.copy","title":"<code>copy(*, name=_NOT_GIVEN, message=_NOT_GIVEN, options=_NOT_GIVEN, default=_NOT_GIVEN, cli_help=_NOT_GIVEN, should_ask=_NOT_GIVEN, value_if_not_asked=_NOT_GIVEN)</code>","text":"<p>Create a new instance like this one, potentially with different values.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Possible[str]</code> <p>The identifier that will be used as the key to access this question's answer.</p> <code>_NOT_GIVEN</code> <code>message</code> <code>Possible[StaticOrDynamicValue[str]]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>options</code> <code>Possible[StaticOrDynamicValue[Options]]</code> <p>The set of possible answers to the question. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>default</code> <code>Possible[StaticOrDynamicValue[str]]</code> <p>The default answer to the question. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>cli_help</code> <code>Possible[Optional[str]]</code> <p>Optional help message to be displayed for command line interface.</p> <code>_NOT_GIVEN</code> <code>should_ask</code> <code>Possible[Optional[ShouldAsk]]</code> <p>If <code>None</code>, the question is asked. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the question should be asked.</p> <code>_NOT_GIVEN</code> <code>value_if_not_asked</code> <code>Possible[Optional[str]]</code> <p>If provided and if should_ask is being used, this value will be recorded as an answer if should_ask evaluates to False.</p> <code>_NOT_GIVEN</code> <p>Returns:</p> Type Description <code>Choice</code> <p>A newly constructed instance with the given values in place of the values of this instance.</p>"},{"location":"api/#columbo.Choice.validate","title":"<code>validate(value, answers)</code>","text":"<p>Validate the value (a new answer).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The identifier that will be used as the key to access this question's answer.</p> required <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <p>Returns:</p> Type Description <code>ValidationResponse</code> <p>A ValidationFailure or ValidationSuccess object.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>The value for <code>options</code> did not have the correct type.</p>"},{"location":"api/#columbo.Confirm","title":"<code>Confirm</code>","text":"<p>               Bases: <code>Question[bool]</code></p> <p>A question with a yes or no answer.</p>"},{"location":"api/#columbo.Confirm.__init__","title":"<code>__init__(name, message, default=False, cli_help=None, should_ask=None, value_if_not_asked=None)</code>","text":"<p>Initialize an instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The identifier that will be used as the key to access this question's answer.</p> required <code>message</code> <code>StaticOrDynamicValue[str]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>default</code> <code>StaticOrDynamicValue[bool]</code> <p>The default answer to the question. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>False</code> <code>cli_help</code> <code>Optional[str]</code> <p>Optional help message to be displayed for command line interface.</p> <code>None</code> <code>should_ask</code> <code>Optional[ShouldAsk]</code> <p>If <code>None</code>, the question is asked. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the question should be asked.</p> <code>None</code> <code>value_if_not_asked</code> <code>Optional[bool]</code> <p>If provided and if should_ask is being used, this value will be recorded as an answer if should_ask evaluates to False.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>A value for <code>value_if_not_asked</code> was given without giving a value for <code>should_ask</code> or the value for <code>value_if_not_asked</code> is not a <code>bool</code>.</p>"},{"location":"api/#columbo.Confirm.ask","title":"<code>ask(answers, no_user_input=False)</code>","text":"<p>Prompt the user with this question.</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <code>no_user_input</code> <code>bool</code> <p>If <code>True</code> the default value for the question will be used without waiting for the user to provide an answer. Default: <code>False</code></p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>The answer to the question.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>The instance was misconfigured in some way.</p>"},{"location":"api/#columbo.Confirm.copy","title":"<code>copy(*, name=_NOT_GIVEN, message=_NOT_GIVEN, default=_NOT_GIVEN, cli_help=_NOT_GIVEN, should_ask=_NOT_GIVEN, value_if_not_asked=_NOT_GIVEN)</code>","text":"<p>Create a new instance like this one, potentially with different values.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Possible[str]</code> <p>The identifier that will be used as the key to access this question's answer.</p> <code>_NOT_GIVEN</code> <code>message</code> <code>Possible[StaticOrDynamicValue[str]]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>default</code> <code>Possible[StaticOrDynamicValue[bool]]</code> <p>The default answer to the question. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>cli_help</code> <code>Possible[Optional[str]]</code> <p>Optional help message to be displayed for command line interface.</p> <code>_NOT_GIVEN</code> <code>should_ask</code> <code>Possible[Optional[ShouldAsk]]</code> <p>If <code>None</code>, the question is asked. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the question should be asked.</p> <code>_NOT_GIVEN</code> <code>value_if_not_asked</code> <code>Possible[Optional[bool]]</code> <p>If provided and if should_ask is being used, this value will be recorded as an answer if should_ask evaluates to False.</p> <code>_NOT_GIVEN</code> <p>Returns:</p> Type Description <code>Confirm</code> <p>A newly constructed instance with the given values in place of the values of this instance.</p>"},{"location":"api/#columbo.Echo","title":"<code>Echo</code>","text":"<p>               Bases: <code>Displayable</code></p> <p>Display a message to the user.</p>"},{"location":"api/#columbo.Echo.__init__","title":"<code>__init__(message, should_ask=None)</code>","text":"<p>Initialize an instance.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>StaticOrDynamicValue[str]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>should_ask</code> <code>Optional[ShouldAsk]</code> <p>If <code>None</code>, the message is displayed to the user. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the message should be displayed.</p> <code>None</code>"},{"location":"api/#columbo.Echo.copy","title":"<code>copy(*, message=_NOT_GIVEN, should_ask=_NOT_GIVEN)</code>","text":"<p>Create a new instance like this one, potentially with different values.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Possible[StaticOrDynamicValue[str]]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> <code>_NOT_GIVEN</code> <code>should_ask</code> <code>Possible[Optional[ShouldAsk]]</code> <p>If <code>None</code>, the message is displayed. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the message should be displayed.</p> <code>_NOT_GIVEN</code> <p>Returns:</p> Type Description <code>Echo</code> <p>A newly constructed instance with the given values in place of the values of this instance.</p>"},{"location":"api/#columbo.Echo.display","title":"<code>display(answers, no_user_input=False)</code>","text":"<p>Display a message to the user.</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <code>no_user_input</code> <code>bool</code> <p>Has no effect because no user input is expected. Default: <code>False</code></p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>The value for <code>message</code> did not have the correct type.</p>"},{"location":"api/#columbo.Question","title":"<code>Question</code>","text":"<p>               Bases: <code>ABC</code>, <code>Generic[QuestionValue]</code></p> <p>Base class for a prompt to the user that produces an answer.</p>"},{"location":"api/#columbo.Question.__init__","title":"<code>__init__(name, message, cli_help=None, should_ask=None, value_if_not_asked=None)</code>","text":"<p>Initialize an instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The identifier that will be used as the key to access this question's answer.</p> required <code>message</code> <code>StaticOrDynamicValue[str]</code> <p>The message to be displayed to the user. If the value is callable, the argument passed in will be the answers that have been provided this far.</p> required <code>cli_help</code> <code>Optional[str]</code> <p>Optional help message to be displayed for command line interface.</p> <code>None</code> <code>should_ask</code> <code>Optional[ShouldAsk]</code> <p>If <code>None</code>, the question is asked. Otherwise, the callable will be passed the answers that have been provided this far and should return <code>True</code> if the question should be asked.</p> <code>None</code> <code>value_if_not_asked</code> <code>Optional[QuestionValue]</code> <p>If provided and if should_ask is being used, this value will be recorded as an answer if should_ask evaluates to False.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>A value for <code>value_if_not_asked</code> was given without giving a value for <code>should_ask</code>.</p>"},{"location":"api/#columbo.Question.ask","title":"<code>ask(answers, no_user_input=False)</code>  <code>abstractmethod</code>","text":"<p>Prompt the user with this question.</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <code>no_user_input</code> <code>bool</code> <p>If <code>True</code> the default value for the question will be used without waiting for the user to provide an answer. Default: <code>False</code></p> <code>False</code> <p>Returns:</p> Type Description <code>Answer</code> <p>The answer to the question.</p>"},{"location":"api/#columbo.Question.should_ask","title":"<code>should_ask(answers)</code>","text":"<p>Should the user be asked this question.</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>Answers</code> <p>The answers that have been provided this far.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if this questions should be asked</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>The value for <code>should_ask</code> did not have the correct type.</p>"},{"location":"api/#functions","title":"Functions","text":""},{"location":"api/#columbo.format_cli_help","title":"<code>format_cli_help(interactions, parser_name=None)</code>","text":"<p>Produce CLI help text for a given set of interactions.</p> <p>Parameters:</p> Name Type Description Default <code>interactions</code> <code>Collection[Interaction]</code> <p>Interactions that should be turned into CLI arguments.</p> required <code>parser_name</code> <code>Optional[str]</code> <p>Optional name to be used in help text. If omitted, the name of the process will be used.</p> <code>None</code> <p>Raises:</p> Type Description <code>DuplicateQuestionNameException</code> <p>One of the given questions attempted to reuse a name.</p> <code>ValueError</code> <p>One of the given <code>Interaction</code>s was not a valid type.</p>"},{"location":"api/#columbo.get_answers","title":"<code>get_answers(interactions, answers=None, no_user_input=False)</code>","text":"<p>Iterates over collection of interactions, invoking interaction specific behavior.</p> <p>Parameters:</p> Name Type Description Default <code>interactions</code> <code>Collection[Interaction]</code> <p>Collection of interactions to present the user with.</p> required <code>answers</code> <code>Optional[Answers]</code> <p>An initial dictionary of answers to start from.</p> <code>None</code> <code>no_user_input</code> <code>bool</code> <p>If <code>True</code> the default value for the question will be used without waiting for the user to provide an answer. Default: <code>False</code></p> <code>False</code> <p>Returns:</p> Type Description <code>MutableAnswers</code> <p>Dictionary of answers.</p> <p>Raises:</p> Type Description <code>DuplicateQuestionNameException</code> <p>One of the given questions attempted to reuse a name. When a value is provided for <code>answers</code>, those are considered as well.</p> <code>ValueError</code> <p>One of the given <code>Interaction</code>s was not a valid type or was misconfigured in some way.</p>"},{"location":"api/#columbo.parse_args","title":"<code>parse_args(interactions, args=None, exit_on_error=True, answers=None, parser_name=None)</code>","text":"<p>Parse command line argument for the given interactions.</p> <p>Parameters:</p> Name Type Description Default <code>interactions</code> <code>Collection[Interaction]</code> <p>Interactions that should be turned into CLI arguments.</p> required <code>args</code> <code>Optional[Sequence[str]]</code> <p>Arguments to parse. If <code>None</code>, <code>sys.argv</code> will be used.</p> <code>None</code> <code>exit_on_error</code> <code>bool</code> <p>If <code>True</code>, print the CLI usage and exit the application. Otherwise, raise an exception with the error information.</p> <code>True</code> <code>answers</code> <code>Optional[Answers]</code> <p>An initial dictionary of answers to start from.</p> <code>None</code> <code>parser_name</code> <code>Optional[str]</code> <p>Optional name to be used in error text. If omitted, the name of the process will be used.</p> <code>None</code> <p>Returns:</p> Type Description <code>MutableAnswers</code> <p>Answers based on the given arguments.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>A value passed to CLI argument was not valid and <code>exit_on_error</code> was <code>True</code>.</p> <code>CliException</code> <p>A value passed to CLI argument was not valid and <code>exit_on_error</code> was <code>False</code>.</p> <code>DuplicateQuestionNameException</code> <p>One of the given questions attempted to reuse a name. When a value is provided for <code>answers</code>, those are considered as well.</p> <code>ValueError</code> <p>One of the given <code>Interaction</code>s was not a valid type or was misconfigured in some way.</p>"},{"location":"api/#exceptions","title":"Exceptions","text":""},{"location":"api/#columbo.CliException","title":"<code>CliException</code>","text":"<p>               Bases: <code>ColumboException</code></p> <p>An error occurred while processing command line arguments.</p>"},{"location":"api/#columbo.ColumboException","title":"<code>ColumboException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for exceptions raised by Columbo</p>"},{"location":"api/#columbo.DuplicateQuestionNameException","title":"<code>DuplicateQuestionNameException</code>","text":"<p>               Bases: <code>ColumboException</code></p> <p>Multiple questions use the same name.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Support for Python <code>3.13</code> &amp; <code>3.14</code>.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Support for Python version <code>3.8</code> &amp; <code>3.9</code>.</li> </ul>"},{"location":"changelog/#internal","title":"### Internal","text":"<ul> <li>Use license expression metadata (PEP 639)</li> </ul>"},{"location":"changelog/#0140-2023-12-02","title":"[0.14.0] - 2023-12-02","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Support for Python <code>3.11</code> and  <code>3.12</code></li> <li>Support for <code>no_user_input</code> in <code>Acknowledge.display()</code> and <code>Echo.display()</code>.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Raise <code>ValueError</code> when dynamic value returns the wrong type.</li> <li><code>BasicQuestion</code> validates <code>value_if_not_asked</code> using the <code>Validator</code> if provided.</li> <li><code>Choice</code> validates <code>value_if_not_asked</code> for dynamic options that depend on the current <code>Answers</code>.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Support for Python version <code>3.7</code>.</li> <li><code>tests/</code> directory no longer included in distributions.</li> </ul>"},{"location":"changelog/#internal_1","title":"Internal","text":"<ul> <li>Use hatch for build backend.</li> </ul>"},{"location":"changelog/#0130post1-2023-05-12","title":"[0.13.0.post1] - 2023-05-12","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Update project metadata for ownership change.</li> </ul>"},{"location":"changelog/#internal_2","title":"Internal","text":"<ul> <li>Use OpenID Connect as a trusted publisher for uploading releases.</li> </ul>"},{"location":"changelog/#0130-2022-10-24","title":"[0.13.0] - 2022-10-24","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Ability for <code>Choice</code> to display a custom message instead of the value being selected. This includes a new type alias (<code>Options</code>) which supports both the <code>Mapping[str, str]</code> and <code>List[str]</code> forms. (#389)</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>The <code>OptionList</code> type for <code>Choice</code> in favor of <code>Options</code> (#389)</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>All exceptions raised by <code>columbo</code> listed in the docstrings. Improved phrasing to make messaging consistent.</li> </ul>"},{"location":"changelog/#0120-2022-09-05","title":"[0.12.0] - 2022-09-05","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Expand acceptable versions of <code>typing-extensions</code> to include v4</li> </ul>"},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Python version <code>3.10</code> tested during CI</li> <li>Python version <code>3.10</code> added to package classifiers</li> <li><code>should_ask</code> keyword argument for <code>Echo</code> and <code>Acknowledge</code> interactions (#356)</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li><code>BasicQuestion.ask()</code> will only evaluate dynamic values for the prompt message and default value once instead of   repeatedly when the response was invalid.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Prevent infinite loop when the default value for a <code>BasicQuestion</code> does not satisfy the <code>Validator</code> and <code>no_user_input</code>   was set to <code>True</code>. Now raises a <code>ValueError</code> when this situation is detected.</li> </ul> <p>The intent was that the default value would always satisfy the <code>Validator</code>, but that was not enforced or explicitly   documented.</p>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Support for Python version <code>3.6</code>.</li> </ul>"},{"location":"changelog/#0110-2021-08-04","title":"[0.11.0] - 2021-08-04","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li><code>value_if_not_asked</code> kwarg for <code>Question</code> interactions to set a value if the question is not asked (#169)</li> </ul>"},{"location":"changelog/#0101-2021-02-26","title":"[0.10.1] - 2021-02-26","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li><code>dataclasses</code> was not listed as a dependency for versions of Python &lt; 3.7</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li>Support for <code>Validator</code>s that return <code>Optional[str]</code></li> </ul>"},{"location":"changelog/#0100-2021-02-18","title":"[0.10.0] - 2021-02-18","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Python 3.9 support (#73)</li> <li>New <code>Validator</code> signature (#37)</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Improved validation for converting question names to command line arguments (#82)</li> </ul>"},{"location":"changelog/#deprecated_1","title":"Deprecated","text":"<ul> <li>Support for <code>Validator</code>s that return <code>Optional[str]</code> (#39)</li> </ul>"},{"location":"changelog/#090-2020-12-18","title":"[0.9.0] - 2020-12-18","text":"<p>First public release. No code changes from v0.8.0.</p>"},{"location":"changelog/#080-2020-02-17","title":"[0.8.0] - 2020-02-17","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>All <code>Interaction</code>s gained a <code>copy()</code> method to allow for creating slightly altered instances of an existing     <code>Interaction</code>.</li> <li><code>parse_args()</code> and <code>format_cli_help()</code> accept an optional <code>parser_name</code> to be displayed in errors and help text.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Stop producing universal wheels.</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li><code>StaticOrDynamicValue</code> enforces that the result of the callable must be the same type as the static type.</li> </ul>"},{"location":"changelog/#removed_4","title":"Removed","text":"<ul> <li><code>DynamicValue</code> is no longer exposed as a type alias.</li> </ul>"},{"location":"changelog/#070-2020-02-10","title":"[0.7.0] - 2020-02-10","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li><code>format_cli_help()</code> function to produce CLI help text.</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Type hints on public API. Be more restrictive when functions should not be making mutations. Be less restrictive when     functions don't rely on specific implementations.</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li><code>CliException</code> inherits from <code>ColumboException</code>.</li> <li>Raise <code>DuplicateQuestionNameException</code> if a list of interactions contains multiple questions with the same name. The     same exception is also raised when an existing answers dictionary already contains a name used by a given questions.</li> </ul>"},{"location":"changelog/#060-2020-01-13","title":"[0.6.0] - 2020-01-13","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li><code>parse_args()</code> function now accepts an initial dictionary of <code>answers</code>.</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Expose additional type hints used in signatures of public API.</li> </ul>"},{"location":"changelog/#050-2020-01-06","title":"[0.5.0] - 2020-01-06","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li><code>exit_on_error</code> added to <code>parse_args()</code> as an optional argument. When <code>False</code>, the function will raise an exception     instead of exiting the application if the arguments can't be parsed.</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Rewrote Columbo example script text.</li> <li>Made example script stand alone.</li> <li>Test against each supported python version in CI.</li> <li>Add support for python 3.8.</li> <li>Use <code>prompt-toolkit</code> for user interaction instead of <code>click</code>.</li> <li>Mark <code>user_io</code> sub-module as private.</li> <li>Expose exception types raised by library.</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Add <code>Args</code> class that <code>user_io</code> relies on.</li> <li>Explicit type is required for <code>singledispatch</code> on python 3.6.</li> <li>Specify minimum supported python version.</li> </ul>"},{"location":"changelog/#removed_5","title":"Removed","text":"<ul> <li>Ability to run the module as an application.</li> <li>Dynamic loading of questions from a file.</li> </ul>"},{"location":"changelog/#040-2019-12-17","title":"[0.4.0] - 2019-12-17","text":""},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>return type of <code>Validator</code> return type updated from <code>bool</code> to <code>Optional[str]</code></li> <li><code>is_valid</code> function updated to <code>validate</code>, return type updated from <code>bool</code> to <code>Optional[str]</code></li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li><code>BasicQuestion</code> constructor now respects the <code>validator</code> argument</li> <li>If <code>validator</code> callable provided, question will be asked until validator returns <code>True</code></li> </ul>"},{"location":"changelog/#030-2019-11-21","title":"[0.3.0] - 2019-11-21","text":"<ul> <li><code>get_answers()</code> takes optional <code>answers</code> dict, appending new answers to this as opposed to new dictionary</li> </ul>"},{"location":"changelog/#020-2019-11-08","title":"[0.2.0] - 2019-11-08","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li><code>get_answers()</code> takes list of interactions and builds dict of answers, handling user I/O</li> </ul>"},{"location":"changelog/#010-2019-10-15","title":"[0.1.0] - 2019-10-15","text":"<p>Initial Release</p>"},{"location":"development-guide/","title":"Development Guide","text":"<p>Welcome! Thanks for wanting to make the project better. This section provides an overview of the project structure and how to work with the code base.</p> <p>Before diving into this, it is best to read:</p> <ul> <li>The whole Usage Guide</li> <li>The Code of Conduct</li> </ul>"},{"location":"development-guide/#how-to-contribute","title":"How to Contribute","text":"<p>There are lots of ways to contribute to the project.</p> <ul> <li>Report a bug</li> <li>Request a new feature</li> <li>Create a pull request that updates the code</li> <li>Create a pull request that updates the documentation</li> <li>Sponsor development of the project      </li> </ul>"},{"location":"development-guide/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>Before creating a pull request, please first discuss the intended change by creating a new issue or commenting on an existing issue.</p>"},{"location":"development-guide/#code-contributions","title":"Code Contributions","text":"<p>Code contributions should include test for the change. For a bug fix, there should be a new test case that demonstrates the issue that was reported (which the contribution addresses). For a new feature, new test cases should cover the new code, while also and checking for edge cases. Generally, the goal is that each change should increase the code coverage rather than decreasing it. (more details)</p> <p>Pull requests will need to pass all tests and linting checks that are part of the CI pipeline before they can be merged.</p> <p>Significant changes should update the documentation with details about how to use the provided functionality.</p> <p>Changes that affect users of <code>columbo</code> must include an entry the CHANGELOG under the <code>[Unrelease]</code> header. Once a new release is ready to be published, a version number will be assigned in place of this header (more details). If a logical change is broken into multiple pull requests, each pull request does not need to add a new entry. For significant changes that affect the development of the project, as apposed to users of <code>columbo</code>, the <code>Internal</code> section can be used.</p>"},{"location":"development-guide/#project-environment-management","title":"Project &amp; Environment management","text":"<p>The <code>columbo</code> project uses Hatch to manage various aspects of the project's development life cycle. This includes:</p> <ul> <li>building the distributions</li> <li>controlling python environments</li> <li>executing common development tasks</li> </ul> <p><code>requirements-bootstrap.txt</code> can be used to install a version of <code>hatch</code> that is known to work with the project.</p>"},{"location":"development-guide/#dependencies","title":"Dependencies","text":"<ul> <li>Direct Library Dependencies - These are packages imported by the library. They are specified under     <code>project.dependencies</code> in <code>pyproject.toml</code>. These should be version ranges that specify the minimum and maximum     version supported for each dependency. A conservative approach to maximum version is used that disallows the next     major version so that an incompatible version of a direct dependency will not be considered valid. </li> <li>Direct Development Dependencies - These all direct dependencies needed for development. This things like     non-library dependencies imported by tests, linting tools, and documentation tools. They are specified in     <code>pyproject.toml</code> under the specific <code>hatch</code> environment. </li> </ul>"},{"location":"development-guide/#environments","title":"Environments","text":"<p>There are three distinct environments that <code>hatch</code> manages:</p> <ul> <li><code>default</code>:  Testing or linting the project code</li> <li><code>docs</code>: Generating documentation for the project</li> <li><code>bump</code>: Releasing a new version of the library</li> </ul>"},{"location":"development-guide/#docker","title":"Docker","text":"<p>For those that want to work in an even more consistent development environment, there is a Dockerfile that defines an images that is isolated from the host machine. The Docker documentation has details on how to install docker on the computer being used.</p> <p>Once that is configured, it is possible to execute code in the container:</p> <pre><code>docker compose run --rm devbox\n(custom code here)\n</code></pre> <p>The devbox container also utilizes <code>hatch</code> to manage the python environments. So the scripts detailed below can be used from within the container.</p>"},{"location":"development-guide/#testing","title":"Testing","text":"<p>Code contributions won't be merged unless the linting and tests pass. Therefore, it is important to execute that functionality locally before pushing changes. This is so common, that it has a dedicated <code>hatch</code> script.</p> <pre><code>hatch run check\n</code></pre> <p>This will run the same tests, linting, and code coverage that are run by the CI pipeline. The only difference is that, when run locally, <code>black</code> and <code>isort</code> are configured to automatically correct issues they detect.</p> <p>Tip</p> <p>Since this is so common, there is also a shorthand for running this in the container</p> <pre><code>docker compose run --rm check\n</code></pre>"},{"location":"development-guide/#writing-tests","title":"Writing Tests","text":"<p>Generally contributors should endeavor to write tests for every feature. Every new feature branch should increase the test coverage rather than decreasing it.</p> <p>The project uses pytest as the testing framework.</p>"},{"location":"development-guide/#testing-fixtures","title":"Testing Fixtures","text":"<p>In addition to the fixtures provided by <code>pytest</code>, the project also utilizes a plugin that provide a fixture that integrates into <code>pytest</code>.</p> <ul> <li>pytest-mock - Exposes unitest.mock.</li> </ul>"},{"location":"development-guide/#linting-tools","title":"Linting Tools","text":"<p>To customize one of the linting tools, please read the documentation specific to that tool:</p> <ul> <li>MyPy</li> <li>Black</li> <li>Isort</li> <li>Flake8</li> <li>Bandit</li> </ul>"},{"location":"development-guide/#documentation","title":"Documentation","text":"<p>The project uses mkdocs as static site generator. The mkdocs-material theme is used to control the look and feel of the website. mike is used to manage documentation for each version of <code>hyper-bump-it</code>.</p> <p>The documentation can be built locally. The following command will build the documentation and start a local server to view the rendered documentation.</p> <pre><code>hatch run docs:serve\n</code></pre>"},{"location":"development-guide/#validate-examples-used-in-documentation","title":"Validate Examples Used in Documentation","text":"<p>In the <code>docs/examples/</code> directory of this repo, there are example Python scripts which are used in the documentation. The below command can be used to validate that the examples run properly:</p> <pre><code>hatch run test-docs-examples\n</code></pre> <p>If the script fails (exits with a non-zero status), it will output information about the file that we need to fix.</p> <p>Warning</p> <p>This script will output some content in the shell every time it runs. Just because the script outputs content to the shell does not mean it has failed; as long as the script finishes successfully (exits with a zero status), there are no problems that need to address.</p>"},{"location":"development-guide/#building-the-library","title":"Building the Library","text":"<p><code>columbo</code> is PEP 517 compliant. build is used as the frontend tool for building the published distributions of the library. <code>hatching</code> is used as the build backend. The libray metadata is defined in <code>pyproject.toml</code>.</p>"},{"location":"development-guide/#publishing-a-new-version","title":"Publishing a New Version","text":"<p>Once the package is ready to be released, there are a few things that need to be done:</p> <ol> <li>Start with a local clone of the repo on the default branch with a clean working tree.</li> <li> <p>Perform the version bump part name (<code>major</code>, <code>minor</code>, or <code>patch</code>).</p> <p>Example: <code>hatch run bump:it by minor</code></p> <p>This wil create a new branch, updates all affected files with the new version, commit the changes to the branch, and  push the branch.</p> </li> <li> <p>Create a new pull request for the pushed branch.</p> </li> <li>Get the pull request approved.</li> <li>Merge the pull request to the default branch.</li> </ol> <p>Merging the pull request will trigger a GitHub Action that will create a new GitHub release. The creation of this new release will trigger a GitHub Action that will to build a wheel &amp; a source distributions of the package and push them to PyPI.</p> <p>Warning</p> <p>The action that uploads the files to PyPI will not run until a repository maintainer acknowledges that the job is ready to run. This additional layer of manual action ensures that distribution are not unintentionally published. </p> <p>In addition to uploading the files to PyPI, the documentation website will be updated to include the new version. If the new version is a full release, it will be made the new <code>latest</code> version.</p>"},{"location":"development-guide/#continuous-integration-pipeline","title":"Continuous Integration Pipeline","text":"<p>The Continuous Integration (CI) Pipeline runs to confirm that the repository is in a good state. It will run when:</p> <ul> <li>a pull request is created</li> <li>new commits are pushed to the branch for an existing pull request</li> <li>a maintainer merges a pull request to the default branch</li> </ul> <p>Pull requests will need to pass all tests and linting checks that are part of the CI pipeline before they can be merged.</p>"},{"location":"development-guide/#lints","title":"Lints","text":"<p>The first set of jobs that run as part of the CI pipline are linters that perform static analysis on the code (more details).</p>"},{"location":"development-guide/#tests","title":"Tests","text":"<p>The next set of jobs run the unit tests (more details). The pipeline runs the tests cases across each supported version of Python to ensure compatibility.</p> <p>For each run of the test cases, the job will record the test results and code coverage information. The pipeline uploads the code coverage information to CodeCov to ensure that a pull request doesn't significantly reduce the total code coverage percentage or introduce a large amount of code that is untested.</p>"},{"location":"development-guide/#distribution-verification","title":"Distribution Verification","text":"<p>The next set of jobs perform a basic smoke test to ensure that the library can be packaged correctly and used. The sdist and wheel distributions are built and installs in into a virtual environment. Python is then run to import the library version. This is done across each supported version of Python to ensure compatibility.</p>"},{"location":"development-guide/#documentation-building","title":"Documentation Building","text":"<p>When running as part of a pull request, the documentation is build in strict mode so that it will fail if there are any errors. The job bundles the generated files into an artifact so that the documentation website can be viewed in its rendered form.</p> <p>When the pipeline is running as a result of a maintainer merging a pull request to the default branch, a job runs that publishes the current state of the documentation to as the <code>dev</code> version. This will allow users to view the \"in development\" state of the documentation with any changed that have been made since a maintainer published the <code>latest</code> version.</p>"},{"location":"development-guide/#renovate-configuration-lint","title":"Renovate Configuration Lint","text":"<p>Renovate is used to automate the process of keeping project dependencies up to date. A small job that confirms that the configuration is valid.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>To install <code>columbo</code>, simply run this simple command in your terminal of choice:</p> <pre><code>python -m pip install columbo\n</code></pre>"},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>The core of <code>columbo</code> are the interaction classes. They provide a way to use code to define how information should be displayed to the user and how the user should provide feedback to the running application.</p> <p>The most commonly used Interactions are the Questions.</p> <ul> <li><code>BasicQuestion</code> - Print text to the terminal. Allow the user to type a text response. Pressing Enter submits the     response.</li> <li><code>Choice</code> - Print text to the terminal, followed by a numbered list of options. Allow the user to enter the number     of the option they wish to select. Pressing Enter submits the response.</li> <li><code>Confirm</code> - Print text to the terminal which expects a Yes or No answer. Pressing Y or N submits the     corresponding response.</li> </ul> <p>In addition to those question types, there are types for when the user needs to be presented with information without providing a response.</p> <ul> <li><code>Echo</code> - Print text to the terminal, but don't stop to accept any input from the user.</li> <li><code>Acknowledge</code> - Print text to the terminal. Wait for the user to press Enter.</li> </ul> <p>After <code>columbo</code> has processed the questions, it returns a dictionary. More specifically the type is <code>Dict[str, Union[str, bool]]</code> (<code>columbo</code> exposes<code>Answers</code> as an alias for this type). The dictionary maps question names to question answers. If the <code>Question</code> was <code>Confirm</code>, the answer will be <code>bool</code>. Otherwise, the answer will be <code>str</code>.</p>"},{"location":"getting-started/#creating-interactions","title":"Creating Interactions","text":"<p>The constructors for each of these types all take a variety of arguments to configure how they should operate. The following statements cover the basic functionality:</p> <ul> <li>Every <code>Interaction</code>  has a <code>message</code> argument that is the text that should be displayed to the user.</li> <li>Every <code>Question</code> has a <code>name</code> argument that is the key to be used in the <code>Answers</code> dictionary. Each question must have     a unique name.</li> <li>Every <code>Question</code> has a <code>default</code> argument that is used when the user does not provide a specific value.</li> </ul> <p>The Usage Guide provides more detailed information about the specifics of each argument for each type of <code>Interaction</code>.</p>"},{"location":"getting-started/#dynamic-values","title":"Dynamic Values","text":"<p>In most cases, an argument to an <code>Interaction</code> constructor can be dynamic (the Usage Guide details the cases where the argument can't be dynamic). A dynamic value is a function that takes the answers that have been provided this far and returns the expected value as a result. For example, <code>message</code> expects a string. So it also accepts a function that accepts <code>Answers</code> and returns a string.</p> <pre><code>import columbo\n\ndef dynamic_hello(answers):\n    return f\"Hello, {answers['name']}\"\n\ninteractions = [\n    columbo.BasicQuestion(\n        \"name\",\n        \"What is your name?\",\n        default=\"Patrick\",\n    ),\n    columbo.Echo(dynamic_hello)\n]\ncolumbo.get_answers(interactions)\n</code></pre> <p>When iterating through these interactions, if the user replied \"Alice\" to the first question, \"Hello, Alice\" would be printed next.</p>"},{"location":"getting-started/#walking-though-basic-examples","title":"Walking Though Basic Examples","text":""},{"location":"getting-started/#user-prompts","title":"User Prompts","text":"<p>This is the example that appears on the main page of the documentation.</p> <pre><code>import columbo\n\ninteractions = [\n    columbo.Echo(\"Welcome to the Columbo example\"),\n    columbo.Acknowledge(\"Press enter to start\"),\n    columbo.BasicQuestion(\n        \"user\",\n        \"What is your name?\",\n        default=\"Patrick\",\n    ),\n    columbo.BasicQuestion(\n        \"user_email\",\n        lambda answers: f\"\"\"What email address should be used to contact {answers[\"user\"]}?\"\"\",\n        default=\"me@example.com\",\n    ),\n    columbo.Choice(\n        \"mood\",\n        \"How are you feeling today?\",\n        options={\n            \"happy\": \"\ud83d\ude00\",\n            \"sad\": \"\ud83d\ude22\",\n            \"sleepy\": \"\ud83e\udd71\",\n            \"confused\": \"\ud83e\udd14\",\n        },\n        default=\"happy\",\n    ),\n    columbo.Confirm(\"likes_dogs\", \"Do you like dogs?\", default=True),\n]\n\nanswers = columbo.get_answers(interactions)\nprint(answers)\n</code></pre> <ul> <li>Line 1: Import the <code>columbo</code> module.</li> <li>Line 3 - 25: Create a list of <code>Interactions</code> to be stored in the variable <code>interactions</code>.</li> <li>Line 4: Create an instance of <code>Echo</code> that will display a basic welcome message.</li> <li>Line 5-7: Create an instance of <code>Acknowledge</code> that will tell the user the program will not continue until Enter is     pressed.</li> <li>Line 8-12: Create an instance of <code>BasicQuestion</code> that will ask the user to provide their name. The key <code>user</code> will be     used in the <code>Answers</code> dictionary for the value from this question. If the user presses Enter without providing a     value, the default of <code>Patrick</code> will be used.</li> <li>Line 13-17: Create an instance of <code>BasicQuestion</code> that will ask the user to provide their email address. The displayed     message is dynamic and will include the value from the previous question. The key <code>user_email</code> will be used in the     <code>Answers</code> dictionary for the value from this question. If the user presses Enter without providing a value, the     default of <code>me@example.com</code> will be used.</li> <li>Line 18-23: Create an instance of <code>Choice</code> that will ask the user for their current mood. The question allows the user     to select one of four options. The key <code>mood</code> will be used in the <code>Answers</code> dictionary for the value from this     question. If the user presses Enter without providing a value, the default of <code>happy</code> will be used.</li> <li>Line 24: Create an instance of <code>Confirm</code> that will ask the user if they like dogs. The key <code>likes_dogs</code> will be used     in the <code>Answers</code> dictionary for the value from this question. If the user presses Enter without providing a     value, the default of <code>True</code> will be used.</li> <li>Line 27: Have <code>columbo</code> iterate over the <code>Interactions</code> prompting the user for each question.</li> <li>Line 28: Print tha <code>Answers</code> dictionary so that the values can be seen.</li> </ul>"},{"location":"getting-started/#command-line-arguments","title":"Command Line Arguments","text":"<p>This is the example will be just like the previous example, except it will demonstrate the Command Line functionality.</p> <p>The relevant change can be seen here:</p> <pre><code>    columbo.Confirm(\"likes_dogs\", \"Do you like dogs?\", default=True),\n]\n\nanswers = columbo.parse_args(interactions, args=[\n    \"--user-email\", \"patrick@example.com\",\n    \"--likes-dogs\",\n])\nprint(answers)\n</code></pre> The full example <pre><code>import columbo\n\ninteractions = [\n    columbo.Echo(\"Welcome to the Columbo example\"),\n    columbo.Acknowledge(\"Press enter to start\"),\n    columbo.BasicQuestion(\n        \"user\",\n        \"What is your name?\",\n        default=\"Patrick\",\n    ),\n    columbo.BasicQuestion(\n        \"user_email\",\n        lambda answers: f\"\"\"What email address should be used to contact {answers[\"user\"]}?\"\"\",\n        default=\"me@example.com\",\n    ),\n    columbo.Choice(\n        \"mood\",\n        \"How are you feeling today?\",\n        options=[\"happy\", \"sad\", \"sleepy\", \"confused\"],\n        default=\"happy\",\n    ),\n    columbo.Confirm(\"likes_dogs\", \"Do you like dogs?\", default=True),\n]\n\nanswers = columbo.parse_args(\n    interactions,\n    args=[\n        \"--user-email\",\n        \"patrick@example.com\",\n        \"--likes-dogs\",\n    ],\n)\nprint(answers)\n</code></pre> <ul> <li>Line 27-30: Have <code>columbo</code> iterate over the <code>Interactions</code> parsing the given command line arguments.</li> <li>Line 28: Provide the value of <code>patrick@example.com</code> for the question requesting the user's email address.</li> <li>Line 29: Select the value of <code>True</code> for the question asking the user if they like dogs.</li> </ul> <p>Note</p> <p>If you omit the <code>args</code> parameter to <code>parse_args()</code> the values in <code>sys.argv</code> will be used.</p>"},{"location":"getting-started/#whats-next","title":"What's Next?","text":"<p>Read the Usage Guide for a more detailed descriptions of ways you can use <code>columbo</code>.</p> <p>Read the API Reference for specific information about all the functions and classes made available by <code>columbo</code>.</p>"},{"location":"why-columbo/","title":"Why Columbo?","text":"<p><code>columbo</code> started as an internal library used at Wayfair by the Python Platforms team. It is now an interdependently maintained open source project with the hope that it will provide benefit from the greater Python community.</p>"},{"location":"why-columbo/#what-problem-did-columbo-initially-solve","title":"What problem did Columbo initially solve?","text":"<p>One of the primary resources the Python Platforms team provided to Wayfair engineers was a set of project templates. This allowed an engineering team to hit the ground running when starting a new HTTP application or Python package. The templates contained best-practice patterns and allow developers to initialize and deploy a new application to production in minutes.</p> <p>The project templates used Cookiecutter in order to generate the files that will be used in the new project. While Cookiecutter makes many things easy for maintainers of a template, the terminal user interface it provides has a few issues:</p> <ul> <li>The text Cookiecutter presents to the user is also the name used to access the value within the template. This can     make it hard for a user to know exactly what information the template is asking for.</li> <li>Cookiecutter always prompts the user for a value for every item defined by the template. Our templates have optional     features that need additional information when used. When a user chooses not to use a given feature, they are still     prompted to provide a value for the items that will not be used when generating files.</li> <li>Cookiecutter does not support validating given values when the user prompting the user to provide input. If a     template requires the value for the first item to be a number, the user will be prompted for values for the     remaining items. When the validation error occurs, the user always needs to start again from scratch.</li> </ul> <p>Cookiecutter can be executed programmatically by passing in a dictionary of values. This allows <code>columbo</code> to handle the user prompts resolving the issues we experienced, while still using Cookiecutter under the covers. With this pattern, all project templates managed by language platform teams at Wayfair benefited from the user experience of working with Cookiecutter templates.</p>"},{"location":"why-columbo/#alternatives","title":"Alternatives","text":"<p><code>columbo</code> is not the only library that exists which provides a way to codify prompting a user for answers to a set of questions. This section compares <code>columbo</code> with some libraries which were created to achieve this task.</p>"},{"location":"why-columbo/#pyinquirer","title":"PyInquirer","text":"<p>PyInquirer was a major inspiration in the development of <code>columbo</code>. <code>PyInquirer</code> supports optional questions and validation in similar way to how <code>columbo</code> supports those features.</p> <p><code>PyInquirer</code> has some features that <code>columbo</code> does not. It has some additional interaction types like selecting multiple options from a list and using an external editor to provide a long form response. It also exposes more rendering options of prompt-toolkit, which is used internally by both libraries.</p> <p><code>columbo</code> has some features that PyInquirer does not. <code>PyInquirer</code> does not support dynamic values as arguments used to construct a question. Additionally, PyInquirer does not provide an option to parse command line arguments as answers to a set of questions.</p> <p>The primary reason why we chose to create <code>columbo</code> instead of using <code>PyInquirer</code> was that the project was still using version 1 of <code>prompt-toolkit</code> while the maintainers of that library were preparing to release version 3<sup>1</sup>. Additionally, the library uses an un-typed dictionary to describe each question, which can make it easier to make configuration mistakes.</p>"},{"location":"why-columbo/#python-inquirer","title":"python-inquirer","text":"<p>python-inquirer is similar to <code>columbo</code> in that they both support dynamic values, validation and optional questions. They also both use classes to represent interactions.</p> <p><code>python-inquirer</code> has some features that <code>columbo</code> does not. It has some additional interaction types like selecting multiple options from a list and using an external editor to provide a long form response. It also exposes more rendering options of blessed.</p> <p><code>columbo</code> has some features that <code>python-inquirer</code> does not. <code>python-inquirer</code> does not provide an option to parse command line arguments as answers to a set of questions or have interactions that do not store an answer. Additionally, <code>colombo</code>'s API is fully type annotated, while <code>python-inquirer</code>'s API is not.</p>"},{"location":"why-columbo/#questionary","title":"questionary","text":"<p>questionary is similar to <code>columbo</code> in that they both support validation, optional questions, and use classes to represent interactions<sup>2</sup>. The API's for both libraries are fully type annotated.</p> <p><code>questionary</code> has some features that <code>columbo</code> does not. It has some additional interaction types like supporting tab completion for some answers. It also exposes more rendering options of prompt-toolkit, which is used internally by both libraries. <code>questionary</code> can also ask questions asynchronously.</p> <p><code>columbo</code> has some features that <code>questionary</code> does not. <code>questionary</code> does not support dynamic values as arguments used to construct a question or provide an option to parse command line arguments as answers to a set of questions.</p> <ol> <li> <p>At the time of writing this document (February 2021), the PyInquirer repo has been updated to use version 3 of prompt-toolkit, but a new release has not been published to PyPi.\u00a0\u21a9</p> </li> <li> <p>Dynamic optional questions requires questions to be specified using a dictionary instead of the class representation.\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/","title":"Examples","text":"<p>These are the examples used in the documentation.</p>"},{"location":"usage-guide/advanced-usage/","title":"Advanced Usage","text":"<p>The Overview and Getting Started pages show simplified examples of how to use <code>columbo</code>. These examples have consisted of:</p> <ul> <li>statically defined list of <code>Interaction</code>s which are then passed to get_answers() or   parse_args().</li> <li>dynamic values that were deterministic based on specific inputs</li> </ul> <p>However, there are times when the actual situation is more complicated than those examples. To handle these situations there are alternate strategies that can be utilized.</p> <p>This page intends to demonstrate some situations that are more complicated and suggest alternative approaches to solving them. This page may not cover every possible situation. The alternate approaches demonstrated on this page maybe suited for more than just the example situation each are paired with. But they should help think about alternate approaches when things get complicated.</p>"},{"location":"usage-guide/advanced-usage/#dynamic-values","title":"Dynamic Values","text":"<p>Each <code>Interaction</code> supports dynamic values. This can be useful when things are deterministic. However, if the <code>options</code> for a <code>Choice</code> are retrieved from an external server, it can be hard to implement the conditional logic. In the following example, the data retrieval logic is encapsulated into a function that is called ahead of time. This allows the application to handle retrival errors or other validation before utilizing <code>columbo</code> to prompt the user for their selection. Additional, <code>default</code> can be set to a value that is known to exist in the options list, even without prior knowledge of the options. </p> <pre><code>import random\n\nimport columbo\n\n\ndef get_dog_breeds() -&gt; list[str]:\n    # In the real world this might actually be a GET request to an external server.\n    possible_breeds = [\n        \"Basset Hound\",\n        \"Great Dane\",\n        \"Golden Retriever\",\n        \"Poodle\",\n        \"Dachshund\",\n    ]\n    return random.choices(possible_breeds, k=random.randint(2, len(possible_breeds)))\n\n\nall_dogs = get_dog_breeds()\ninteractions = [\n    columbo.Choice(\n        name=\"favorite\",\n        message=\"Which dog breed do you like best?\",\n        options=all_dogs,\n        default=all_dogs[0],\n    )\n]\nprint(columbo.get_answers(interactions))\n</code></pre>"},{"location":"usage-guide/advanced-usage/#optional-questions","title":"Optional Questions","text":"<p>Each <code>Interaction</code> can be optional. However, there are times where a number of those <code>Interaction</code>s all rely on the same check to determine if the questions should be asked. One strategy to achieve this is to have same function could be passed to <code>should_ask</code> for each <code>Interaction</code>. An alternate strategy is to not limit the code to a single list of <code>Interaction</code>s. get_answers() and parse_args() can be called multiple times within an application. Both functions can be passed the resultant <code>Answers</code> instance returned from the first call in order to keep the answers context moving forward.</p> <pre><code>import columbo\n\ninitial_user_answers = columbo.get_answers(\n    [columbo.Confirm(\"has_dog\", \"Do you have a dog?\", default=True)]\n)\nif initial_user_answers[\"has_dog\"]:\n    interactions = [\n        columbo.Echo(\n            \"Because you have have a dog, we want to ask you some more questions.\",\n        ),\n        columbo.BasicQuestion(\n            \"dog_name\",\n            \"What is the name of the dog?\",\n            default=\"Kaylee\",\n        ),\n        columbo.BasicQuestion(\n            \"dog_breed\",\n            \"What is the breed of the dog?\",\n            default=\"Basset Hound\",\n        ),\n    ]\n    user_answers = columbo.get_answers(interactions, answers=initial_user_answers)\nelse:\n    user_answers = initial_user_answers\n\nprint(user_answers)\n</code></pre>"},{"location":"usage-guide/advanced-usage/#branching-paths","title":"Branching Paths","text":"<p>The fact that each <code>Interaction</code> can be optional can be used to support branching paths. However, for paths the diverge significantly, it can be hard to keep track of how the <code>should_ask</code> values interact. Similar to optional questions, a strategy to address this is to not limit the code to a single list of <code>Interaction</code>s. get_answers() and parse_args() can be called multiple times within an application. This allows the application to manage the branching directly. Both functions can be passed the resultant <code>Answers</code> instance returned from the first call in order to keep the answers context moving forward.</p> <pre><code>import columbo\n\n\ndef outcome(answers: columbo.Answers) -&gt; str:\n    if answers.get(\"has_key\", False):\n        return \"You try the the key on the lock. With a little jiggling, it finally opens. You open the gate and leave.\"\n    if answers.get(\"has_hammer\", False):\n        return \"You hit the lock with the hammer and it falls to the ground. You open the gate and leave.\"\n    return (\n        \"Unable to open the gate yourself, you yell for help. A farmer in the nearby field hears you. \"\n        \"He reaches into his pocket and pulls out a key to unlock the gate and open it. \"\n        \"As you walk through the archway he says, \"\n        '\"What I don\\'t understand is how you got in there. This is the only key.\"'\n    )\n\n\ninteractions = [\n    columbo.Echo(\n        \"You wake up in a room that you do not recognize. \"\n        \"In the dim light, you can see a large door to the left and a small door to the right.\"\n    ),\n    columbo.Choice(\n        \"which_door\",\n        \"Which door do you walk through?\",\n        options=[\"left\", \"right\"],\n        default=\"left\",\n    ),\n]\nuser_answers = columbo.get_answers(interactions)\nif user_answers[\"which_door\"] == \"left\":\n    interactions = [\n        columbo.Echo(\n            \"You step into a short hallway and the door closes behind you, refusing to open again. \"\n            \"As you walk down the hallway, there is a small side table with a key on it.\",\n        ),\n        columbo.Confirm(\n            \"has_key\",\n            \"Do you pick up the key before going through the door at the other end?\",\n            default=True,\n        ),\n    ]\nelse:\n    interactions = [\n        columbo.Echo(\n            \"You step into smaller room and the door closes behind, refusing to open again. \"\n            \"The room has a single door on the opposite side of the room and a work bench with a hammer on it.\",\n        ),\n        columbo.Confirm(\n            \"has_hammer\",\n            \"Do you pick up the hammer before going through the door at the other side?\",\n            default=True,\n        ),\n    ]\n\ninteractions.extend(\n    [\n        columbo.Echo(\n            \"You enter a small courtyard with high walls. There is an archway that would allow you to go free, \"\n            \"but the gate is locked.\"\n        ),\n        columbo.Echo(outcome),\n    ]\n)\n\nuser_answers = columbo.get_answers(interactions, answers=user_answers)\nprint(user_answers)\n</code></pre>"},{"location":"usage-guide/advanced-usage/#direct-interaction","title":"Direct Interaction","text":"<p>get_answers() provides a helpful functionality for iterating over multiple <code>Interaction</code>s and collecting the responses. However, it is implemented using methods that are directly available on each <code>Interaction</code> object. If an application wants full control over the flow of the user prompts, ask() and display() can be called as needed.</p>"},{"location":"usage-guide/command-line/","title":"Command Line Interface","text":"<p>In addition to providing an interactive terminal based UI to ask the user each question, <code>columbo</code> can also generate a command line argument parser based on the list of <code>Interaction</code>s. When used in this manner, <code>Echo</code> &amp; <code>Acknowledge</code> are ignored. To produce a consistent command line argument format, <code>columbo</code> will do the following to the value of each question's <code>name</code>:</p> <ul> <li>Make it lowercase.</li> <li>Replace space characters with dashes</li> <li>Replace underscore character with dash</li> </ul> <p>For example:</p> Original Result user user user_email user-email User Email user-email <p>Warning</p> <p>As a result of the transformation process, it is possible to have a sequence of questions with unique <code>name</code>s for the <code>Answers</code> dictionary, but cause a collision when creating command line arguments.</p> <p>For <code>BasicQuestion</code> &amp; <code>Choice</code>, the result will be preceded with two dashes (ex: <code>--user</code> or <code>--user-email</code>).</p> <p>For <code>Confirm</code>, <code>columbo</code> produces two command lines arguments. After following the transformation rules, the command line arguments will be <code>--{NAME}</code> &amp; <code>--no-{NAME}</code> to explicitly specify <code>True</code> or <code>False</code>, respectively (ex: <code>--likes-dogs</code> and <code>--no-likes-dogs</code>)</p> <p>Since the argument parser must be constructed before receiving any user input, all <code>Question</code>s produce arguments. <code>should_ask</code> is only considered when processing the given arguments.</p>"},{"location":"usage-guide/fundamentals/","title":"Usage Guide","text":"<p>This section provides detailed descriptions of all the ways <code>columbo</code> can be used. If you are new to <code>columbo</code>, the Getting Started page provides a gradual introduction of the basic functionality with examples.</p>"},{"location":"usage-guide/fundamentals/#static-vs-dynamic-values","title":"Static vs Dynamic Values","text":"<p>Before diving into the specifics about each <code>Interaction</code> type, it is important to understand how <code>columbo</code> supports both static and dynamic values. A static value is a value that is known when creating an <code>Interaction</code> instance. Frequently this will be a value like a string literal, but that is not a requirement.</p> <p>In contrast, a dynamic value is one which depends on one or more answer provided by the user from a previous question. This is supported by accepting a function that takes an <code>Answers</code> dictionary as an argument and returns a value with the type of that static value would have. For example, the static value for <code>message</code> is <code>str</code>. Therefore, the dynamic value would be a function that accepts <code>Answers</code> and returns a string (<code>Callable[[Answers],str]</code>).</p> <p>In most cases, any argument to an <code>Interaction</code>'s constructor can be dynamic. This guide will explicitly mention when the constructor requires an argument to be a static value.</p>"},{"location":"usage-guide/fundamentals/#detailed-sections","title":"Detailed Sections","text":"<ul> <li>Interactions</li> <li>Optional Questions &amp; Branching</li> <li>Validators</li> <li>Command Line Interface</li> <li>Advanced Usage</li> </ul>"},{"location":"usage-guide/interactions/","title":"Interactions","text":"<p><code>columbo</code> provides five types of <code>Interactions</code> that can be used to control how the program will interact with the user:</p> <ul> <li><code>Echo</code> - Print text to the terminal, but don't stop to accept any input from the user.</li> <li><code>Acknowledge</code> - Print text to the terminal. Wait for the user to press Enter.</li> <li><code>BasicQuestion</code> - Print text to the terminal. Allow the user to type a text response. Pressing Enter submits the     response.</li> <li><code>Choice</code> - Print text to the terminal, followed by a numbered list of options. Allow the user to enter the number     of the option they wish to select. Pressing Enter submits the response.</li> <li><code>Confirm</code> - Print text to the terminal which expects a Yes or No answer. Pressing Y or N submits the     corresponding response.</li> </ul>"},{"location":"usage-guide/interactions/#creating-interactions","title":"Creating Interactions","text":""},{"location":"usage-guide/interactions/#echo-acknowledge","title":"Echo &amp; Acknowledge","text":"<p><code>Echo</code> and <code>Acknowledge</code> both accept the following arguments.</p> <ul> <li><code>message</code>: The message to be displayed to the user.</li> <li><code>should_ask</code>: Optional. When given, the argument should be a function that accepts an <code>Answers</code> dictionary and returns     <code>True</code> or <code>False</code>. Returning <code>True</code> indicates that the message should be displayed. Returning <code>False</code> will skip the     message and not present it to the user. See Optional Questions &amp; Branching for more details.</li> </ul>"},{"location":"usage-guide/interactions/#all-questions","title":"All Questions","text":"<p><code>BasicQuestion</code>, <code>Choice</code>, &amp; <code>Confirm</code> all accept the following arguments.</p> <ul> <li><code>name</code>: The identifier that will be used as the key to access this question's answer. Each question must have a unique     value for <code>name</code>. Can't be dynamic.</li> <li><code>message</code>: The message to be displayed to the user.</li> <li><code>default</code>: The default answer to the question. This is used when the user does not provide an explicit value.</li> <li><code>should_ask</code>: Optional. When given, the argument should be a function that accepts an <code>Answers</code> dictionary and returns     <code>True</code> or <code>False</code>. Returning <code>True</code> indicates that the question should be asked. Returning <code>False</code> will skip the     question and not present it to the user. See Optional Questions &amp; Branching for more details.</li> <li><code>cli_help</code>: Optional. A help message to be displayed for command line interface. See     CLI documentation for more details. Can't be dynamic.</li> <li><code>value_if_not_asked</code>: Optional. A value used as an answer if the question is not asked. Can't be dynamic.</li> </ul>"},{"location":"usage-guide/interactions/#basic-question","title":"Basic Question","text":"<p>In addition to the arguments mentioned above, <code>BasicQuestion</code> also accepts the following argument.</p> <ul> <li><code>validator</code>: Optional. When given, the argument should be a function that checks if the user response is valid. Not     providing this argument means that any value provided by the user will be accepted. See     Validators for more details.</li> </ul> <p>The <code>default</code> value for the <code>BasicQuestion</code> must satisfy the <code>Validator</code>. An exception will be raised if that is   not the case.</p>"},{"location":"usage-guide/interactions/#choice","title":"Choice","text":"<p>In addition to the arguments mentioned above, <code>Choice</code> also accepts the following argument.</p> <ul> <li><code>options</code>: The set of possible values the user can choose from. This can be provided as a list of strings, or as     a mapping of string to string where the key is what is recorded as the answer, and the      value is what is displayed to the user.</li> </ul>"},{"location":"usage-guide/interactions/#confirm","title":"Confirm","text":"<p><code>Confirm</code> doesn't take any additional arguments that weren't mentioned above. However, the <code>default</code> argument takes a <code>bool</code> instead of <code>str</code> and defaults to <code>False</code>.</p>"},{"location":"usage-guide/optional-questions-and-branching/","title":"Optional Questions & Branching","text":""},{"location":"usage-guide/optional-questions-and-branching/#only-prompting-some-interactions","title":"Only Prompting Some Interactions","text":"<p>There are situations where a question should be asked some times, but not all the time. Or, a message should be displayed some times. For example, a program that collects information about a user's  pets should not ask the user for the dog's name and breed if the user said they do not have a dog. If the user has a dog, the program may want to display a special message. The <code>should_ask</code> argument that is present on each interaction provides a way to achieve this functionality.</p> <p>Similarly, <code>should_ask</code> can be used to provide branching paths to the user. An example of these branching paths is a Choose Your Own Adventure story. The story provides the reader with choices during the adventure. These choices introduce diverging paths of interactions that may or may not join at the end.</p> <p>Warning</p> <p>By default when <code>columbo</code> skips over a question, the <code>Answers</code> dictionary will NOT contain a key-value pair for the skipped question. If you want a skipped question to have a specific answer when skipped, you can do so using the <code>value_if_not_asked</code> kwarg as detailed in the section below.</p>"},{"location":"usage-guide/optional-questions-and-branching/#optional-questions","title":"Optional Questions","text":"<p>The following is a basic example that has two optional questions that are not asked based on the answer to the first question. It also has an optional message that is only displayed based on the answer to the first question.</p> <pre><code>import columbo\n\n\ndef user_has_dog(answers: columbo.Answers) -&gt; bool:\n    return answers[\"has_dog\"]\n\n\ninteractions = [\n    columbo.Confirm(\"has_dog\", \"Do you have a dog?\", default=True),\n    columbo.Echo(\n        \"Because you have have a dog, we want to ask you some more questions.\",\n        should_ask=user_has_dog,\n    ),\n    columbo.BasicQuestion(\n        \"dog_name\",\n        \"What is the name of the dog?\",\n        should_ask=user_has_dog,\n        default=\"Kaylee\",\n    ),\n    columbo.BasicQuestion(\n        \"dog_breed\",\n        \"What is the breed of the dog?\",\n        should_ask=user_has_dog,\n        default=\"Basset Hound\",\n    ),\n]\n\nuser_answers = columbo.get_answers(interactions)\nprint(user_answers)\n</code></pre> <p>If the user accepts the default answers for each of these questions, the output will be:</p> <pre><code>{\"has_dog\": True, \"dog_name\": \"Kaylee\", \"dog_breed\": \"Basset Hound\"}\n</code></pre> <p>However, when the user answers the first question with \"no\", the output will be:</p> <pre><code>{\"has_dog\": False}\n</code></pre> <p>Note that the <code>Answers</code> dictionary in the previous example has an answer to only the first question (there are no answers for the skipped questions). The next section shows how to provide an answer for a skipped question.</p>"},{"location":"usage-guide/optional-questions-and-branching/#providing-an-answer-for-skipped-questions","title":"Providing an Answer for Skipped Questions","text":"<p>To provide a specific answer used when a user skips a question, use the <code>value_if_not_asked</code> kwarg:</p> <pre><code>import columbo\n\n\ndef user_has_dog(answers: columbo.Answers) -&gt; bool:\n    return answers[\"has_dog\"]\n\n\ninteractions = [\n    columbo.Confirm(\"has_dog\", \"Do you have a dog?\", default=True),\n    columbo.Echo(\n        \"Because you have have a dog, we want to ask you some more questions.\",\n        should_ask=user_has_dog,\n    ),\n    columbo.BasicQuestion(\n        \"dog_name\",\n        \"What is the name of the dog?\",\n        should_ask=user_has_dog,\n        value_if_not_asked=\"n/a\",\n        default=\"Kaylee\",\n    ),\n    columbo.BasicQuestion(\n        \"dog_breed\",\n        \"What is the breed of the dog?\",\n        should_ask=user_has_dog,\n        value_if_not_asked=\"n/a\",\n        default=\"Basset Hound\",\n    ),\n]\n\nuser_answers = columbo.get_answers(interactions)\nprint(user_answers)\n</code></pre> <p>If the user answers the first question with \"no\", the output will now be:</p> <pre><code>{\"has_dog\": False, \"dog_name\": \"n/a\", \"dog_breed\": \"n/a\"}\n</code></pre> <p>Columbo will not ask the user for a dog name or breed, but the answers will have the values provided with the <code>value_if_not_asked</code> kwarg.</p>"},{"location":"usage-guide/optional-questions-and-branching/#branching-paths","title":"Branching Paths","text":"<p>A question that is part of a branching path is very similar to an optional question. It is still a question where the <code>should_ask</code> function was provided to determine if the question should be skipped or not. The branching aspect comes from there being at least two sets of optional questions. Each set has a <code>should_ask</code> argument that checks for a different state for a single answer. In this way, only one of the sets of optional questions will ever be asked.</p> <p>The following is an example of a short story that has two divergent paths that join at the end. Each individual question isn't different from the optional questions demonstrated above. The program achieves the branching paths by supplying different <code>should_ask</code> values that will never both evaluate to <code>True</code>.</p> <pre><code>import columbo\n\n\ndef went_left(answers: columbo.Answers) -&gt; bool:\n    return answers[\"which_door\"] == \"left\"\n\n\ndef went_right(answers: columbo.Answers) -&gt; bool:\n    return answers[\"which_door\"] == \"right\"\n\n\ndef outcome(answers: columbo.Answers) -&gt; str:\n    if answers.get(\"has_key\", False):\n        return \"You try the the key on the lock. With a little jiggling, it finally opens. You open the gate and leave.\"\n    if answers.get(\"has_hammer\", False):\n        return \"You hit the lock with the hammer and it falls to the ground. You open the gate and leave.\"\n    return (\n        \"Unable to open the gate yourself, you yell for help. A farmer in the nearby field hears you. \"\n        \"He reaches into his pocket and pulls out a key to unlock the gate and open it. \"\n        \"As you walk through the archway he says, \"\n        '\"What I don\\'t understand is how you got in there. This is the only key.\"'\n    )\n\n\ninteractions = [\n    columbo.Echo(\n        \"You wake up in a room that you do not recognize. \"\n        \"In the dim light, you can see a large door to the left and a small door to the right.\"\n    ),\n    columbo.Choice(\n        \"which_door\",\n        \"Which door do you walk through?\",\n        options=[\"left\", \"right\"],\n        default=\"left\",\n    ),\n    columbo.Echo(\n        \"You step into a short hallway and the door closes behind you, refusing to open again. \"\n        \"As you walk down the hallway, there is a small side table with a key on it.\",\n        should_ask=went_left,\n    ),\n    columbo.Confirm(\n        \"has_key\",\n        \"Do you pick up the key before going through the door at the other end?\",\n        should_ask=went_left,\n        default=True,\n    ),\n    columbo.Echo(\n        \"You step into smaller room and the door closes behind, refusing to open again. \"\n        \"The room has a single door on the opposite side of the room and a work bench with a hammer on it.\",\n        should_ask=went_right,\n    ),\n    columbo.Confirm(\n        \"has_hammer\",\n        \"Do you pick up the hammer before going through the door at the other side?\",\n        should_ask=went_right,\n        default=True,\n    ),\n    columbo.Echo(\n        \"You enter a small courtyard with high walls. There is an archway that would allow you to go free, \"\n        \"but the gate is locked.\"\n    ),\n    columbo.Echo(outcome),\n]\n\nuser_answers = columbo.get_answers(interactions)\nprint(user_answers)\n</code></pre> <p>The import thing to note in the example above is that the <code>Answers</code> dictionary can have a key-value pair for <code>has_key</code> or <code>has_hammer</code>, not both.</p>"},{"location":"usage-guide/optional-questions-and-branching/#complicated-situations","title":"Complicated Situations","text":"<p>While <code>should_ask</code> is capable of supporting complex combinations of optional questions and branching paths, there are times where only using that functionality can make the code harder to read and understand. There are alternate strategies that can be used in order to make the code easier to follow.</p>"},{"location":"usage-guide/validators/","title":"Validators","text":""},{"location":"usage-guide/validators/#context","title":"Context","text":"<p><code>BasicQuestion</code> allows the user to provide arbitrary text as the answer to the question. However, there are frequently constraints on what is considered a valid answer. Providing a <code>Validator</code> for the question allows <code>columbo</code> to verify that the text provided by the user satisfies those constraints. If the answer is not valid, <code>columbo</code> will tell the user that the answer is not valid and ask them to try again.</p> <p>The <code>default</code> value for the <code>BasicQuestion</code> must satisfy the <code>Validator</code>. An exception will be raised if that is not the case. This is because it could lead to: * An infinite loop when prompting a user * Command line parsing always failing if a value is not given</p> <p>Note</p> <p>While <code>Choice</code> and <code>Confirm</code> do not expose a <code>validator</code> argument they still ensure that the answer is valid. A <code>Confirm</code> question will only continue when Y, N, or Enter are pressed. Any other keys will be ignored. A <code>Choice</code> question will only continue when Enter is pressed if the input matches the number <code>columbo</code> assigned to one of the choices.</p>"},{"location":"usage-guide/validators/#validator-structure","title":"Validator Structure","text":"<p>A <code>Validator</code> must be a function which has the following type signature: <code>Callable[[str, Answers], ValidationResponse]</code><sup>1</sup>. We'll walk through this signature explaining each part.</p> <p>A <code>Validator</code> takes two arguments: a string (which is the response provided by the user to a question) and an <code>Answers</code> dictionary containing the answer for each previous question.</p> <p>The <code>Validator</code> must return a <code>ValidationResponse</code> which is a type alias for: <code>Union[ValidationFailure, ValidationSuccess]</code><sup>1</sup>. Thus, a <code>Validator</code> must return either a <code>ValidationFailure</code> or a <code>ValidationSuccess</code> object. You should use a <code>ValidationSuccess</code> when the user's response is valid and <code>ValidationFailure</code> when the user's response is invalid. Both <code>ValidationFailure</code> and <code>ValidationSuccess</code> have a <code>valid</code> attribute that is <code>False</code> and <code>True</code>, respectively. A <code>ValidationFailure</code> requires that you provide an <code>error</code> which describes why the given value was invalid (<code>columbo</code> will display this message before asking users to answer the question again so users get some feedback about what they are doing wrong).</p>"},{"location":"usage-guide/validators/#upgrading-validator-structure","title":"Upgrading Validator Structure","text":"<p>Validators could return <code>Optional[str]</code> before &lt;<code>0.10.0</code>, this was removed in <code>1.0.0</code>.</p> <p>The docs in this section detail how to upgrade a <code>Validator</code> from a columbo version &lt; <code>0.10.0</code> to the newer <code>Validator</code> structure. Feel free to skip this section if it's not pertinent to you.</p> <p>Previously, a <code>Validator</code> would return either an error message (as a string) if validation failed or <code>None</code> if the validation succeeded. To update a <code>Validator</code>, you should update the validator function to return <code>ValidationFailure</code> if validation fails and <code>ValidationSuccess</code> if the validation succeeds. The table below describes the old and new return values for different validation statuses. </p> Validation Status Old Return Value (before <code>0.10.0</code>) New Return Value (since <code>0.10.0</code>) Failed \"Some error message\" ValidationFailure(error=\"Some error message\") Succeeded None ValidationSuccess()"},{"location":"usage-guide/validators/#example-validator","title":"Example Validator","text":"<p>Let's say we were asking for a user's email address. The <code>Validator</code> below provides a simple check to see if the email address seems valid<sup>1</sup>. If the user's response doesn't contain an <code>@</code> character with at least one word character on each side then the response is invalid and the user will have to enter an email address again (hopefully a valid one this time).</p> <pre><code>import re\nfrom typing import List\n\nimport columbo\n\n\ndef is_email_address(value: str, _: columbo.Answers) -&gt; columbo.ValidationResponse:\n    if not re.match(r\"^\\w+@\\w+\", value):\n        error_message = f\"{value} is not a valid email address\"\n        return columbo.ValidationFailure(error=error_message)\n\n    return columbo.ValidationSuccess()\n\n\ninteractions: List[columbo.Interaction] = [\n    columbo.BasicQuestion(\n        \"user_email_address\",\n        \"What email address should be used to contact you?\",\n        default=\"me@example.com\",\n        validator=is_email_address,\n    )\n]\n\nuser_answers = columbo.get_answers(interactions)\nprint(user_answers)\n</code></pre> <ol> <li> <p>The regular expression for checking for an RFC 822 compliant email address is overly complicated. Additionally, that only ensures that the text is valid. It does not confirm if the host will accept emails sent to that address or if the user is the owner of the email address.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"}]}